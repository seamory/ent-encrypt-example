// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/ent/accountinfo"
	"main/internal/property"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AccountInfo is the model entity for the AccountInfo schema.
type AccountInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password property.Password `json:"password,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case accountinfo.FieldPassword:
			values[i] = new(property.Password)
		case accountinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case accountinfo.FieldUsername:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AccountInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountInfo fields.
func (ai *AccountInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accountinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ai.ID = int(value.Int64)
		case accountinfo.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				ai.Username = value.String
			}
		case accountinfo.FieldPassword:
			if value, ok := values[i].(*property.Password); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value != nil {
				ai.Password = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AccountInfo.
// Note that you need to call AccountInfo.Unwrap() before calling this method if this AccountInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AccountInfo) Update() *AccountInfoUpdateOne {
	return (&AccountInfoClient{config: ai.config}).UpdateOne(ai)
}

// Unwrap unwraps the AccountInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AccountInfo) Unwrap() *AccountInfo {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountInfo is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AccountInfo) String() string {
	var builder strings.Builder
	builder.WriteString("AccountInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("username=")
	builder.WriteString(ai.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(fmt.Sprintf("%v", ai.Password))
	builder.WriteByte(')')
	return builder.String()
}

// AccountInfos is a parsable slice of AccountInfo.
type AccountInfos []*AccountInfo

func (ai AccountInfos) config(cfg config) {
	for _i := range ai {
		ai[_i].config = cfg
	}
}
